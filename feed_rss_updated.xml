<?xml version="1.0" encoding="UTF-8" ?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"> <channel><title>langroid</title><description>Langroid LLM App Development Framework</description><link>https://langroid.github.io/langroid/</link><atom:link href="https://langroid.github.io/langroid/feed_rss_updated.xml" rel="self" type="application/rss+xml" /><docs>https://github.com/langroid/langroid</docs><language>en</language> <pubDate>Fri, 01 Nov 2024 00:48:58 -0000</pubDate> <lastBuildDate>Fri, 01 Nov 2024 00:48:58 -0000</lastBuildDate> <ttl>1440</ttl> <generator>MkDocs RSS plugin - v1.14.0</generator> <image> <url>https://upload.wikimedia.org/wikipedia/commons/thumb/4/43/Feed-icon.svg/128px-Feed-icon.svg.png</url> <title>langroid</title><link>https://langroid.github.io/langroid/</link> </image> <item> <title>Language Models: Completion and Chat-Completion</title> <author>pchalasani</author> <category>chat</category> <category>langroid</category> <category>llm</category> <category>local-llm</category> <description>&lt;p&gt;Transformer-based language models are fundamentally next-token predictors, so naturally all LLM APIs today at least provide a completion endpoint. If an LLM is a next-token predictor, how could it possibly be used to generate a response to a question or instruction, or to engage in a conversation with a human user? This is where the idea of &#34;chat-completion&#34; comes in.This post is a refresher on the distinction between completion and chat-completion,and some interesting details on how chat-completion is implemented in practice.&lt;/p&gt;</description><link>https://langroid.github.io/langroid/blog/2023/09/19/language-models-completion-and-chat-completion/</link> <pubDate>Thu, 31 Oct 2024 17:28:26 +0000</pubDate><source url="https://langroid.github.io/langroid/feed_rss_updated.xml">langroid</source><guid isPermaLink="true">https://langroid.github.io/langroid/blog/2023/09/19/language-models-completion-and-chat-completion/</guid> </item> <item> <title>Overview of Langroid&#39;s Multi-Agent Architecture (prelim)</title> <author>pchalasani</author> <author>nils</author> <author>jihye</author> <author>someshjha</author> <category>langroid</category> <category>llm</category> <category>multi-agent</category> <description>&lt;h2&gt;Agent, as an intelligent message transformer&lt;/h2&gt;&lt;p&gt;A natural and convenient abstraction in designing a complexLLM-powered system is the notion of an &lt;em&gt;agent&lt;/em&gt; that is instructed to be responsible for a specific aspect of the overall task. In terms of code, an &lt;em&gt;Agent&lt;/em&gt; is essentially a class representing an intelligent entity that can respond to &lt;em&gt;messages&lt;/em&gt;, i.e., an agent is simply a &lt;em&gt;message transformer&lt;/em&gt;.An agent typically encapsulates an (interface to an) LLM, and may also be equipped with so-called &lt;em&gt;tools&lt;/em&gt; (as described below) and &lt;em&gt;external documents/data&lt;/em&gt; (e.g., via a vector database, as described below).Much like a team of humans, agents interact by exchanging messages, in a manner reminiscent of the &lt;a href=&#34;https://en.wikipedia.org/wiki/Actor_model&#34;&gt;&lt;em&gt;actor framework&lt;/em&gt;&lt;/a&gt; in programming languages.An &lt;em&gt;orchestration mechanism&lt;/em&gt; is needed to manage the flow of messages between agents, to ensure that progress is made towards completion of the task, and to handle the inevitable cases where an agent deviates from instructions.Langroid is founded on this &lt;em&gt;multi-agent programming&lt;/em&gt; paradigm, where agents are first-class citizens, acting as message transformers, and communicate by exchanging messages.&lt;/p&gt;</description><link>https://langroid.github.io/langroid/blog/2024/08/15/overview-of-langroids-multi-agent-architecture-prelim/</link> <pubDate>Thu, 31 Oct 2024 17:28:26 +0000</pubDate><source url="https://langroid.github.io/langroid/feed_rss_updated.xml">langroid</source><guid isPermaLink="true">https://langroid.github.io/langroid/blog/2024/08/15/overview-of-langroids-multi-agent-architecture-prelim/</guid> </item> <item> <title>Langroid: Harness LLMs with Multi-Agent Programming</title> <author>pchalasani</author> <category>langroid</category> <category>llm</category> <description>&lt;h1&gt;Langroid: Harness LLMs with Multi-Agent Programming&lt;/h1&gt;&lt;h2&gt;The LLM Opportunity&lt;/h2&gt;&lt;p&gt;Given the remarkable abilities of recent Large Language Models (LLMs), thereis an unprecedented opportunity to build intelligent applications powered bythis transformative technology. The top question for any enterprise is: howbest to harness the power of LLMs for complex applications? For technical andpractical reasons, building LLM-powered applications is not as simple asthrowing a task at an LLM-system and expecting it to do it.&lt;/p&gt;</description><link>https://langroid.github.io/langroid/blog/2023/09/03/langroid-harness-llms-with-multi-agent-programming/</link> <pubDate>Thu, 31 Oct 2024 17:28:26 +0000</pubDate><source url="https://langroid.github.io/langroid/feed_rss_updated.xml">langroid</source><guid isPermaLink="true">https://langroid.github.io/langroid/blog/2023/09/03/langroid-harness-llms-with-multi-agent-programming/</guid> </item> <item> <title>Langroid: Knolwedge Graph RAG powered by Neo4j</title> <author>mohannad</author> <category>knowledge-graph</category> <category>langroid</category> <category>neo4j</category> <category>rag</category> <description>&lt;h2&gt;&#34;Chat&#34; with various sources of information&lt;/h2&gt;&lt;p&gt;LLMs are increasingly being used to let users converse in natural language with a variety of types of data sources:&lt;/p&gt;</description><link>https://langroid.github.io/langroid/blog/2024/01/18/langroid-knolwedge-graph-rag-powered-by-neo4j/</link> <pubDate>Thu, 31 Oct 2024 17:28:26 +0000</pubDate><source url="https://langroid.github.io/langroid/feed_rss_updated.xml">langroid</source><guid isPermaLink="true">https://langroid.github.io/langroid/blog/2024/01/18/langroid-knolwedge-graph-rag-powered-by-neo4j/</guid> </item> <item> <title>Using Langroid with Local LLMs</title> <author>pchalasani</author> <category>langroid</category> <category>llm</category> <category>local-llm</category> <description>&lt;h2&gt;Why local models?&lt;/h2&gt;&lt;p&gt;There are commercial, remotely served models that currently appear to beat all open/localmodels. So why care about local models? Local models are exciting for a number of reasons:&lt;/p&gt;</description><link>https://langroid.github.io/langroid/blog/2023/09/14/using-langroid-with-local-llms/</link> <pubDate>Thu, 31 Oct 2024 17:28:26 +0000</pubDate><source url="https://langroid.github.io/langroid/feed_rss_updated.xml">langroid</source><guid isPermaLink="true">https://langroid.github.io/langroid/blog/2023/09/14/using-langroid-with-local-llms/</guid> </item> <item> <title>MALADE: Multi-Agent Architecture for Pharmacovigilance</title> <author>jihye</author> <author>nils</author> <author>pchalasani</author> <author>mengelhard</author> <author>someshjha</author> <author>anivaryakumar</author> <author>davidpage</author> <category>langroid</category> <category>multi-agent</category> <category>neo4j</category> <category>rag</category> <description>&lt;h1&gt;MALADE: Multi-Agent Architecture for Pharmacovigilance&lt;/h1&gt;&lt;p&gt;&lt;a href=&#34;https://www.mlforhc.org/2024-abstracts&#34;&gt;Published in ML for HealthCare 2024&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/2408.01869&#34;&gt;Arxiv&lt;/a&gt; &lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/jihyechoi77/malade&#34;&gt;GitHub&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Summary&lt;/h2&gt;&lt;p&gt;We introduce MALADE (&lt;strong&gt;M&lt;/strong&gt;ultiple &lt;strong&gt;A&lt;/strong&gt;gents powered by &lt;strong&gt;L&lt;/strong&gt;LMs for &lt;strong&gt;ADE&lt;/strong&gt; Extraction),a multi-agent system for Pharmacovigilance. It is the first effective explainable multi-agent LLM system for extracting Adverse Drug Events (ADEs) from FDA drug labels and drug prescription data.&lt;/p&gt;</description><link>https://langroid.github.io/langroid/blog/2024/08/12/malade-multi-agent-architecture-for-pharmacovigilance/</link> <pubDate>Thu, 31 Oct 2024 17:28:26 +0000</pubDate><source url="https://langroid.github.io/langroid/feed_rss_updated.xml">langroid</source><guid isPermaLink="true">https://langroid.github.io/langroid/blog/2024/08/12/malade-multi-agent-architecture-for-pharmacovigilance/</guid> </item> </channel></rss>